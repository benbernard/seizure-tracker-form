---
description: Instructions for setting up and running TypeScript scripts in the project
globs: scripts/**/*
---
# Setting Up and Running Scripts

This project uses TypeScript scripts for various tasks like database setup, data imports, and maintenance. Here's how to set up and run scripts:

## 1. Script Configuration

### TypeScript Configuration
Scripts have their own `tsconfig.json` in the `scripts` directory that extends the root config:

```typescript
// scripts/tsconfig.json
{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "module": "CommonJS",
    "moduleResolution": "node",
    "noEmit": false,
    "baseUrl": "../",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["./**/*.ts"]
}
```

### Package.json Script Entry
Add your script to `package.json` under the `scripts` section:

```json
{
  "scripts": {
    "your-script-name": "ts-node -r tsconfig-paths/register -P scripts/tsconfig.json scripts/your-script.ts"
  }
}
```

## 2. Script Structure

### Basic Script Template
```typescript
// Load environment variables first
import { config } from "dotenv";
import { resolve } from "node:path";

// Load environment variables from .env.local
config({ path: resolve(__dirname, "../.env.local") });

// Check required environment variables
if (process.env.REQUIRED_VAR) {
  console.error("Missing required environment variable: REQUIRED_VAR");
  process.exit(1);
}

// Main script function
async function main() {
  try {
    // Your script logic here
    console.log("Script completed successfully!");
  } catch (error) {
    console.error("Script failed:", error);
    process.exit(1);
  }
}

// Run the script
main().catch((error) => {
  console.error("Unhandled error:", error);
  process.exit(1);
});
```

### AWS Script Template
For scripts that interact with AWS services:

```typescript
import { config } from "dotenv";
import { resolve } from "node:path";
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";

// Load environment variables from .env.local
config({ path: resolve(__dirname, "../.env.local") });

// Check AWS environment variables
if (
  !process.env.AWS_REGION ||
  !process.env.AWS_ACCESS_KEY_ID ||
  !process.env.AWS_SECRET_ACCESS_KEY
) {
  console.error("Missing required AWS environment variables");
  process.exit(1);
}

// Initialize AWS client
const client = new DynamoDBClient({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

const docClient = DynamoDBDocumentClient.from(client, {
  marshallOptions: {
    removeUndefinedValues: true,
  },
});
```

## 3. Running Scripts

### Development Environment
1. Ensure `.env.local` exists with required variables
2. Run using npm:
```bash
npm run your-script-name
```

### Required Dependencies
Make sure these are in your `package.json`:
- `ts-node`: For running TypeScript files directly
- `tsconfig-paths`: For path alias support
- `dotenv`: For environment variable loading

## Notes

- Always load environment variables before other imports
- Use proper error handling and exit codes
- Keep scripts in the `scripts` directory
- Use TypeScript for type safety
- Follow the existing patterns in the project
- Add proper logging for debugging
- Document script purpose and usage

## Common Patterns

### Environment Variables
```typescript
// Load before other imports
import { config } from "dotenv";
import { resolve } from "node:path";
config({ path: resolve(__dirname, "../.env.local") });
```

### Error Handling
```typescript
try {
  // Your code
} catch (error) {
  console.error("Error:", error);
  process.exit(1);
}
```

### AWS Operations
```typescript
const command = new PutCommand({
  TableName: TABLE_NAME,
  Item: item,
});
await docClient.send(command);
``` 